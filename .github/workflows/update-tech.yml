name: Auto-detect tech stack

on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * 1" # Mondays 08:00 UTC

permissions:
  contents: write

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      OWNER: MA1002643
      README_PATH: README.md
      MAX_PER_LINE: "14" # icons per row
      MAX_ICONS: "28" # safety cap
      SEED_ICONS: "nextjs,react,ts,js,tailwind,nodejs,express,mongodb,mysql,git,githubactions,vercel,dotnet,aws"
    steps:
      - uses: actions/checkout@v4

      - name: Build & inject icons
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const core = require('@actions/core');

            const OWNER        = process.env.OWNER || context.repo.owner;
            const README_PATH  = process.env.README_PATH || 'README.md';
            const MAX_PER_LINE = parseInt(process.env.MAX_PER_LINE || '14', 10);
            const MAX_ICONS    = parseInt(process.env.MAX_ICONS || '28', 10);
            const SEED_ICONS   = (process.env.SEED_ICONS || '')
                                  .split(',').map(s => s.trim()).filter(Boolean);

            // ---------- map names -> skillicons slugs (keep small & safe) ----------
            const norm = s => (s || '').toLowerCase().replace(/[^a-z0-9+._-]/g,'').trim();
            function toSlug(name) {
              const k = norm(name);
              // languages
              if (k==='javascript'||k==='js') return 'js';
              if (k==='typescript'||k==='ts') return 'ts';
              if (k==='python'||k==='py') return 'py';
              if (k==='java') return 'java';
              if (k==='go'||k==='golang') return 'go';
              if (k==='csharp'||k==='c#') return 'cs';
              if (k==='cpp'||k==='c++') return 'cpp';
              if (k==='c') return 'c';
              if (k==='php') return 'php';
              if (k==='ruby') return 'ruby';
              if (k==='kotlin') return 'kotlin';
              if (k==='swift') return 'swift';
              if (k==='dart') return 'dart';
              if (k==='rust') return 'rust';
              // frameworks / tools (common)
              if (k==='react') return 'react';
              if (k==='next'||k==='nextjs'||k==='next.js') return 'nextjs';
              if (k==='tailwind'||k==='tailwindcss') return 'tailwind';
              if (k==='node'||k==='nodejs'||k==='node.js') return 'nodejs';
              if (k==='express') return 'express';
              if (k==='mongodb') return 'mongodb';
              if (k==='mysql') return 'mysql';
              if (k==='postgres'||k==='postgresql') return 'postgres';
              if (k==='git') return 'git';
              if (k==='githubactions'||k==='actions') return 'githubactions';
              if (k==='vercel') return 'vercel';
              if (k==='docker') return 'docker';
              if (k==='dotnet'||k==='.net') return 'dotnet';
              if (k==='aws') return 'aws';
              return null;
            }

            const preferred = [
              'nextjs','react','ts','js','tailwind','nodejs','express',
              'mongodb','postgres','mysql',
              'git','githubactions','docker','vercel',
              'dotnet','aws','py','java','go','cs','cpp','php','ruby','rust','kotlin','swift','dart'
            ];

            async function listPublicRepos(owner) {
              const repos = [];
              for (let page = 1; page <= 5; page++) {
                const { data } = await github.request(
                  'GET /users/{username}/repos',
                  { username: owner, per_page: 100, page, type: 'public', sort: 'updated' }
                );
                if (!data || data.length === 0) break;
                repos.push(...data);
              }
              return repos;
            }

            async function detect() {
              const slugs = new Set();

              // Always include your seed icons first
              for (const s of SEED_ICONS.map(toSlug).filter(Boolean)) slugs.add(s);

              // Best-effort: Languages API only (cheap & reliable)
              let repos = [];
              try {
                repos = await listPublicRepos(OWNER);
              } catch (e) {
                core.warning(`Repo list failed: ${e.message}`);
              }

              for (const r of repos) {
                try {
                  const langs = await github.request('GET /repos/{owner}/{repo}/languages', {
                    owner: OWNER, repo: r.name
                  });
                  for (const k of Object.keys(langs.data || {})) {
                    const s = toSlug(k);
                    if (s) slugs.add(s);
                  }
                } catch {}
              }

              // order by preference, cap length
              const ordered = [
                ...preferred.filter(x => slugs.has(x)),
                ...[...slugs].filter(x => !preferred.includes(x)).sort()
              ].slice(0, MAX_ICONS);

              return ordered;
            }

            function inject(src, start, end, payload) {
              const i1 = src.indexOf(start), i2 = src.indexOf(end);
              if (i1 === -1 || i2 === -1) return null;
              return src.slice(0, i1 + start.length) + '\n' + payload + '\n' + src.slice(i2);
            }

            // ---- run ----
            const ordered = await detect();
            const perline = Math.min(MAX_PER_LINE, Math.max(ordered.length, 1));
            const darkURL  = 'https://skillicons.dev/icons?i=' + ordered.join(',') + '&perline=' + perline + '&theme=dark';
            const lightURL = 'https://skillicons.dev/icons?i=' + ordered.join(',') + '&perline=' + perline;

            const block = [
              '<p align="center">',
              '  <picture>',
              '    <source media="(prefers-color-scheme: dark)" srcset="' + darkURL + '">',
              '    <img src="' + lightURL + '" alt="Detected tech stack icons">',
              '  </picture>',
              '</p>'
            ].join('\n');

            const readme = fs.readFileSync(process.env.README_PATH || 'README.md', 'utf8');
            const TECH_START = '<!--TECH:START-->';
            const TECH_END   = '<!--TECH:END-->';
            const updated = inject(readme, TECH_START, TECH_END, block);
            if (!updated) core.setFailed('README is missing TECH markers.');

            if (updated && updated !== readme) {
              fs.writeFileSync(process.env.README_PATH || 'README.md', updated, 'utf8');
              core.notice(`Injected ${ordered.length} icons`);
            } else {
              core.notice('No changes to README.md');
            }
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: auto-update tech icons"
          file_pattern: README.md
