name: Daily Language Time

on:
  schedule:
    - cron: "0 7 * * *" # 08:00 when London is UTC+1 (BST)
    - cron: "0 8 * * *" # 08:00 when London is UTC+0 (GMT)
  workflow_dispatch: {}

permissions:
  contents: write

env:
  TZ: Europe/London

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build README section from WakaTime (rolling window, Europe/London)
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
          WAKATIME_USER: ${{ secrets.WAKATIME_USER }} # can be unset or empty
        run: |
          python - <<'PY'
          import os, sys, json, datetime, base64, re
          from datetime import timedelta
          from urllib.request import Request, urlopen
          from urllib.parse import urlencode
          from urllib.error import HTTPError
          from zoneinfo import ZoneInfo

          def hhmm_words(total_seconds:int) -> str:
              m = total_seconds // 60
              h = m // 60
              mm = m % 60
              if h and mm: return f"{h} hrs {mm} mins"
              if h: return f"{h} hrs"
              return f"{mm} mins"

          def percent(secs, total):
              return (secs / total * 100.0) if total else 0.0

          def bar(pct: float, width: int = 25) -> str:
              filled = int(pct / 100 * width + 1e-9)
              return "█" * filled + "░" * (width - filled)

          def fetch_summaries(user: str, api_key: str, start, end):
              params = {"start": start.isoformat(), "end": end.isoformat(), "timezone": "Europe/London"}
              url = f"https://wakatime.com/api/v1/users/{user}/summaries?{urlencode(params)}"
              headers = {"Authorization": "Basic " + base64.b64encode(api_key.encode()).decode()}
              with urlopen(Request(url, headers=headers)) as resp:
                  return json.load(resp)

          tz = ZoneInfo("Europe/London")
          today = datetime.datetime.now(tz).date()

          # Use last 30 *complete* days if available; otherwise fall back to last 7 *complete* days
          end_day = today - timedelta(days=1)       # include only full days
          start_30 = end_day - timedelta(days=29)   # 30 full days inclusive
          start_7  = end_day - timedelta(days=6)    # 7 full days inclusive

          api_key = os.getenv("WAKATIME_API_KEY")
          if not api_key:
              print("::error::WAKATIME_API_KEY secret missing. Add it in repo settings.")
              sys.exit(1)

          user = os.getenv("WAKATIME_USER") or "current"

          used_start = start_30
          used_end = end_day
          try:
              data = fetch_summaries(user, api_key, start_30, end_day)
          except HTTPError as e:
              if e.code == 402:
                  print("::warning::WakaTime returned 402 (Payment Required) for 30-day range. Falling back to last 7 full days.")
                  used_start = start_7
                  try:
                      data = fetch_summaries(user, api_key, used_start, used_end)
                  except HTTPError as ee:
                      print(f"::error::WakaTime API error {ee.code} at /api/v1/users/{user}/summaries (7-day fallback)")
                      body = ee.read().decode(errors="ignore")
                      print(body[:500])
                      sys.exit(1)
              else:
                  print(f"::error::WakaTime API error {e.code} at /api/v1/users/{user}/summaries")
                  body = e.read().decode(errors="ignore")
                  print(body[:500])
                  sys.exit(1)

          # Aggregate languages across the selected window (covers public/private/forked work)
          languages = {}
          for day in data.get("data", []):
              for lang in day.get("languages", []):
                  secs = int(lang.get("total_seconds", 0))
                  if secs > 0:
                      name = lang.get("name", "Unknown")
                      languages[name] = languages.get(name, 0) + secs

          items = sorted(languages.items(), key=lambda kv: kv[1], reverse=True)

          if items:
              total = sum(s for _, s in items)
              name_w = max(12, max(len(n) for n, _ in items))
              time_w, bar_w = 14, 25
              lines = [
                  f"{n.ljust(name_w)}  {hhmm_words(s).ljust(time_w)}  {bar(percent(s,total), bar_w)}   {percent(s,total):05.2f} %"
                  for n, s in items
              ]
              block = "```text\n" + "\n".join(lines) + "\n```"
          else:
              block = "> No editor activity recorded in the following window."

          start_tag = "<!-- LANG-TIME:START -->"
          end_tag = "<!-- LANG-TIME:END -->"
          with open("README.md","r",encoding="utf-8") as f:
              readme = f.read()
          if start_tag not in readme or end_tag not in readme:
              print("::error::Markers not found in README.md. Add the LANG-TIME markers.")
              sys.exit(1)

          # Footer like: _Last updated on YYYY-MM-DD (Displaying Data from past N days)
          days_span = (used_end - used_start).days + 1
          footer = f"Last updated on {end_day.isoformat()} (Displaying Data from past {days_span} days)"

          replacement = (
              f"{start_tag}\n\n{block}\n\n"
              f"{footer}\n\n"
              f"{end_tag}"
          )

          new_readme = re.sub(rf"{re.escape(start_tag)}.*?{re.escape(end_tag)}", replacement, readme, flags=re.DOTALL)
          with open("README.md","w",encoding="utf-8") as f:
              f.write(new_readme)
          print("Updated README language time block.")
          PY

      - name: Commit & push changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update language time (rolling window, bars + %)"
          git push
